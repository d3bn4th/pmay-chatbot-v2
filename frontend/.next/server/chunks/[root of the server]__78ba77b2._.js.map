{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/sanju/Code/pmay-chatbot/frontend/app/api/chat/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { type CoreMessage } from 'ai';\n\nconst BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8000';\n\nexport async function POST(req: Request) {\n  try {\n    const { messages } = await req.json();\n\n    const lastUserMessage = messages.findLast((message: CoreMessage) => message.role === 'user');\n\n    if (!lastUserMessage) {\n      return NextResponse.json({\n        error: \"No user message found in the request.\"\n      }, { status: 400 });\n    }\n\n    // Make request to backend chat endpoint\n    const backendResponse = await fetch(`${BACKEND_URL}/chat`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ message: lastUserMessage.content }),\n    });\n\n    if (!backendResponse.ok) {\n      const errorText = await backendResponse.text().catch(() => null);\n      console.error('Backend error:', backendResponse.status, errorText);\n      throw new Error(`Backend request failed with status ${backendResponse.status}: ${errorText}`);\n    }\n\n    // Directly return the backend response body as a stream\n    return new Response(backendResponse.body, {\n      headers: {\n        'Content-Type': 'text/event-stream',\n        'Cache-Control': 'no-cache, no-transform',\n        'Connection': 'keep-alive',\n        'X-Vercel-AI-Data-Stream': backendResponse.headers.get('X-Vercel-AI-Data-Stream') || 'v1', // Pass through X-Vercel-AI-Data-Stream header\n      },\n    });\n\n  } catch (error) {\n    console.error('Error in chat endpoint:', error);\n    if (error instanceof Error && error.message.includes(\"Backend request failed with status\")) {\n        return NextResponse.json(\n            { error: error.message },\n            { status: 500 }\n        );\n    }\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAGA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW,IAAI;AAExC,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAEnC,MAAM,kBAAkB,SAAS,QAAQ,CAAC,CAAC,UAAyB,QAAQ,IAAI,KAAK;QAErF,IAAI,CAAC,iBAAiB;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,wCAAwC;QACxC,MAAM,kBAAkB,MAAM,MAAM,GAAG,YAAY,KAAK,CAAC,EAAE;YACzD,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBAAE,SAAS,gBAAgB,OAAO;YAAC;QAC1D;QAEA,IAAI,CAAC,gBAAgB,EAAE,EAAE;YACvB,MAAM,YAAY,MAAM,gBAAgB,IAAI,GAAG,KAAK,CAAC,IAAM;YAC3D,QAAQ,KAAK,CAAC,kBAAkB,gBAAgB,MAAM,EAAE;YACxD,MAAM,IAAI,MAAM,CAAC,mCAAmC,EAAE,gBAAgB,MAAM,CAAC,EAAE,EAAE,WAAW;QAC9F;QAEA,wDAAwD;QACxD,OAAO,IAAI,SAAS,gBAAgB,IAAI,EAAE;YACxC,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB;gBACjB,cAAc;gBACd,2BAA2B,gBAAgB,OAAO,CAAC,GAAG,CAAC,8BAA8B;YACvF;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,IAAI,iBAAiB,SAAS,MAAM,OAAO,CAAC,QAAQ,CAAC,uCAAuC;YACxF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO,MAAM,OAAO;YAAC,GACvB;gBAAE,QAAQ;YAAI;QAEtB;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}